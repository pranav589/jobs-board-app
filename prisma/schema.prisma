// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  CANDIDATE
  EMPLOYER
}

enum JobStatus {
  APPLIED
  INTERVIEWING
  OFFERED
  REJECTED
}

model Job {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  title        String
  type         String
  locationType String
  location     String?
  description  String?
  salary       Int?
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    Int
  employer     User          @relation("PostedJobs", fields: [employerId], references: [id])
  employerId   Int
  applications Application[]
  approved     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("jobs")
}

model Application {
  id        Int       @id @default(autoincrement())
  job       Job       @relation(fields: [jobId], references: [id])
  jobId     Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  status    JobStatus
  createdAt DateTime  @default(now())
}

model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  userName           String?
  password           String
  image              String?
  role               UserRole?
  address            String?
  experience         String?
  resume             String?
  approvedForPosting Boolean       @default(false)
  company            Company?      @relation(fields: [companyId], references: [id])
  companyId          Int?
  jobs               Job[]         @relation("PostedJobs")
  applications       Application[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("users")
}

model Company {
  id      Int     @id @default(autoincrement())
  name    String
  email   String  @unique
  logo    String?
  url     String?
  address String
  users   User[]
  jobs    Job[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
